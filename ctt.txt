buat virtual env 
py -m venv Env
=============================
masuk ke mode Env
Env\Scripts\activate.bat 
=============================
ganti akun git, delete lewat control panel
======================
install fastapi
pip install fastapi
pip install "uvicorn[standard]"
=====================
running server
uvicorn books:app --reload
uvicorn {nama_file_py}:app --reload
=====================
Order path API berpengaruh, jika ada 2 endpoint dan nama structure endpoint mirip, dan ada yg menerima querry
yg hanya menerima path di taro di atas, yg menerima querry di taro bawah
=====================
pydantics untuk validation
mandatory
min max, gt lt
======================
from fastapi import FastAPI, Path
Path : untuk validation path parameter
=====================
API : ada inputan query parameter & path parameter
===============
API Structure
===================
1xx : Information response (request processing)
2xx : Success : request successfully completed
3xx : Redirection : Further Action Must be complete
4xx : Client error
5xx : Server Error
============================
200 : Get - Return Data 
201 : Created
204 : Not Create, Not Return -> Put Request 
=======================
400 : Bad Request 
401 : Unauthorized 
404 : Request Resource can not be found 
422 : Semantic Errors in Client Request
=========================
500 : Issue on Server (exp : error on python code)
=====================
@app.post("/create-book", status_code = status.HTTP_201_CREATED)
@app.get("/books/publish/", status_code = status.HTTP_200_OK)
Response standard dari Fast API (sebagai Server Response)
=============================
Depedencies 
SQLalchemy (pip install)

========================
Buat project
1. Create venv 
2. Buat Folder project 
3. Buat file database (untuk connection)
=====================
urutan parameter api perlu diperhatikan (ada case pada saat path parameter)
===================
hashing password
libary : passlib, bcrypt==4.0.1/newer 
from passlib.context import CryptContext 
bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
bcrypt_context.hash(create_user_request.password)
========================
lib python-multipart
========================
JWT : Json Web Token -> for authentication
parts :
1. Header (a)
2. Payload (b)
3. Signature (c)
aaaaaaaa.bbbbbbbb.cccccccc
=====================
JWT Header - 2 parts : (a)
- alg : algo for signing
- typ : type of token
===========================
JWT payload consist of the data, the payload data contains claims (3) : 
*as actual data of the user
- Registered
- Public
- Private
encode using base64 (b)
========================
JWT Signature - created by using algorithm in the header (c)
========================
stop uvicorn 
end task background process (python)
======================
SQLite3 -> Untuk skala kecil
MySQL & PostgreSQL -> untuk skala besar
===================
Postgre
- Can only 1 Port 
- 1 port has limit 100 connection (server)
- 1 port, 100 connection/server, multiple DB 
- 1 DB -> Many Tables
====================
membuat requirements : 
pip freeze > requirements.txt
=======================
Alembic
- database migration tools that more powerful than SQLalchemy
- SQLalchemy only migrate for a new database 
- The case is when the app is evolves, the database need to evolve as well 
- and this tools helps us to keep modifying our database to keep up with rapid development requirements
=======================
